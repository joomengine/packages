{
    "system_name": "CascadingSelectManager JS",
    "path": null,
    "target": 2,
    "type": 0,
    "comment_type": 1,
    "joomla_version": 3,
    "function_name": "cascadingSelectManagerJS",
    "code": "\/**\r\n * CascadingSelectManager\r\n *\r\n * Joomla 5\u2013ready, subform-safe cascading select manager.\r\n * Works exclusively with <joomla-field-fancy-select> (Choices.js).\r\n *\r\n * Example chain: Country \u2192 State \u2192 City\r\n *\r\n * @version 1.8.2\r\n * @since   Joomla 5.x\r\n *\/\r\nclass CascadingSelectManager {\r\n\tconstructor(options = {}) {\r\n\t\tif (!options || !Array.isArray(options.chain) || options.chain.length < 2) {\r\n\t\t\tconsole.error('CascadingSelectManager: The \"chain\" option must be an array of at least two field definitions.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.fieldChain = options.chain.map((configuration) => this._normalizeFieldConfiguration(configuration));\r\n\t\tthis.matchMode = this._normalizeMatchMode(options.matchMode || 'endsWith');\r\n\t\tthis.subformContainerClass = options.subformContainerClass || null;\r\n\r\n\t\tthis.initialData = options.initialData || {};\r\n\r\n\t\t\/\/ NEW: track initialized containers safely (works for document, elements, fragments)\r\n\t\tthis._initializedContainers = new WeakSet();\r\n\r\n\t\tthis._initializeOnDocumentReady();\r\n\t}\r\n\r\n\t\/* ----------------------------------------------------------------------\r\n\t * Initialization\r\n\t * ---------------------------------------------------------------------- *\/\r\n\t_initializeOnDocumentReady() {\r\n\t\tconst initializeManager = () => this._initializeAllChains();\r\n\r\n\t\tif (document.readyState === 'loading') {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', initializeManager);\r\n\t\t} else {\r\n\t\t\tinitializeManager();\r\n\t\t}\r\n\r\n\t\t\/\/ Only initialize the newly added subform row, not all rows\r\n\t\tdocument.addEventListener('subform-row-add', (event) => {\r\n\t\t\t\/\/ Joomla 5 typically provides the row on event.detail.row\r\n\t\t\tconst newRow = event?.detail?.row || event?.target?.closest('.subform-repeatable-group');\r\n\t\t\tif (!newRow) return;\r\n\r\n\t\t\tif (this.subformContainerClass && !newRow.closest(`.${this.subformContainerClass}`)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._initializeAllChains(newRow);\r\n\t\t});\r\n\t}\r\n\r\n\t_getAllContainers(rootElement = document) {\r\n\t\t\/\/ If a specific subform container class is configured:\r\n\t\tif (this.subformContainerClass) {\r\n\t\t\t\/\/ If the rootElement itself is such a container, use it directly\r\n\t\t\tif (rootElement instanceof Element && rootElement.classList.contains(this.subformContainerClass)) {\r\n\t\t\t\treturn [rootElement];\r\n\t\t\t}\r\n\t\t\t\/\/ Otherwise, find all matching containers under rootElement\r\n\t\t\tconst containers = rootElement.querySelectorAll\r\n\t\t\t\t? rootElement.querySelectorAll(`.${this.subformContainerClass}`)\r\n\t\t\t\t: [];\r\n\t\t\tif (containers.length > 0) {\r\n\t\t\t\treturn Array.from(containers);\r\n\t\t\t}\r\n\t\t\tconsole.warn(`CascadingSelectManager: No subform containers found for class \"${this.subformContainerClass}\"`);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t\/\/ No specific class: treat the passed rootElement itself as the container\r\n\t\treturn [rootElement];\r\n\t}\r\n\r\n\t_initializeAllChains(rootElement = document) {\r\n\t\tconst containers = this._getAllContainers(rootElement);\r\n\t\tif (containers.length === 0) return;\r\n\r\n\t\tcontainers.forEach((container) => {\r\n\t\t\t\/\/ Guard: don\u2019t re-initialize the same container twice\r\n\t\t\tif (this._initializedContainers.has(container)) return;\r\n\t\t\tthis._initializedContainers.add(container);\r\n\r\n\t\t\tconst firstFieldConfiguration = this.fieldChain[0];\r\n\t\t\tconst firstSelectElements = this._findAllMatchingElements(container, firstFieldConfiguration.identifier, this.matchMode);\r\n\r\n\t\t\tfirstSelectElements.forEach((firstSelectElement) => {\r\n\t\t\t\tconst chainInstance = this._buildChainInstance(firstSelectElement, container);\r\n\t\t\t\tif (!chainInstance) return;\r\n\r\n\t\t\t\t\/\/ Prepare fields\r\n\t\t\t\tthis.fieldChain.forEach((fieldConfiguration, index) => {\r\n\t\t\t\t\tconst selectElement = chainInstance[fieldConfiguration.name];\r\n\t\t\t\t\tif (!selectElement) return;\r\n\r\n\t\t\t\t\tthis._ensureChoicesInitialization(selectElement);\r\n\r\n\t\t\t\t\tif (index === 0 && fieldConfiguration.placeholder?.ready) {\r\n\t\t\t\t\t\tthis._ensurePlaceholderIfEmpty(selectElement, fieldConfiguration.placeholder.ready);\r\n\t\t\t\t\t} else if (index > 0) {\r\n\t\t\t\t\t\tthis._resetSelectElement(selectElement, fieldConfiguration.placeholder?.initial || '\u2014');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t\/\/ Bind change listeners per field\r\n\t\t\t\tthis.fieldChain.forEach((fieldConfiguration, index) => {\r\n\t\t\t\t\tconst selectElement = chainInstance[fieldConfiguration.name];\r\n\t\t\t\t\tif (!selectElement) return;\r\n\t\t\t\t\tthis._bindChangeListener(selectElement, async () => {\r\n\t\t\t\t\t\tawait this._onFieldLevelChange(chainInstance, index);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t\/\/ Preload any existing selections\r\n\t\t\t\tthis._preloadExistingSelections(chainInstance);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t\/* ----------------------------------------------------------------------\r\n\t * Change Handling\r\n\t * ---------------------------------------------------------------------- *\/\r\n\tasync _onFieldLevelChange(chainInstance, changedFieldIndex) {\r\n\t\tfor (let index = changedFieldIndex + 1; index < this.fieldChain.length; index++) {\r\n\t\t\tconst fieldConfiguration = this.fieldChain[index];\r\n\t\t\tconst selectElement = chainInstance[fieldConfiguration.name];\r\n\t\t\tif (!selectElement) continue;\r\n\t\t\tthis._resetSelectElement(selectElement, fieldConfiguration.placeholder?.initial || '\u2014');\r\n\t\t}\r\n\r\n\t\tconst nextFieldIndex = changedFieldIndex + 1;\r\n\t\tif (nextFieldIndex >= this.fieldChain.length) return;\r\n\r\n\t\tconst nextFieldConfiguration = this.fieldChain[nextFieldIndex];\r\n\t\tif (!nextFieldConfiguration.endpoint) return;\r\n\r\n\t\tconst parentFieldConfiguration = this.fieldChain[changedFieldIndex];\r\n\t\tconst parentSelectElement = chainInstance[parentFieldConfiguration.name];\r\n\t\tif (!parentSelectElement || !parentSelectElement.value) return;\r\n\r\n\t\ttry {\r\n\t\t\tconst responseData = await this._fetchDataFromServer(nextFieldConfiguration.endpoint.url, {\r\n\t\t\t\t[nextFieldConfiguration.endpoint.parameterKey]: parentSelectElement.value,\r\n\t\t\t});\r\n\t\t\tconst nextSelectElement = chainInstance[nextFieldConfiguration.name];\r\n\t\t\tthis._populateSelectElement(nextSelectElement, responseData, nextFieldConfiguration.placeholder?.ready || '\u2014');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`CascadingSelectManager: Failed to fetch data for ${nextFieldConfiguration.name}`, error);\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Safely set the value for a Fancy Select (Choices.js) field\r\n\t * and visually update it in the Joomla UI.\r\n\t *\/\r\n\tasync _setFancySelectValue(selectElement, valueToSelect) {\r\n\t\tif (!selectElement || !valueToSelect) return;\r\n\r\n\t\tconst fancyWrapper = selectElement.closest('joomla-field-fancy-select');\r\n\t\tconst choicesInstance =\r\n\t\t\tselectElement.choices ||\r\n\t\t\t(fancyWrapper && fancyWrapper.choicesInstance) ||\r\n\t\t\t(window.Joomla?.FieldChoices?.instances && Joomla.FieldChoices.instances[selectElement.id]) ||\r\n\t\t\tnull;\r\n\r\n\t\t\/\/ Allow Choices to finalize rendering before setting programmatically\r\n\t\tawait new Promise((resolve) => setTimeout(resolve, 50));\r\n\r\n\t\ttry {\r\n\t\t\tif (choicesInstance) {\r\n\t\t\t\tchoicesInstance.removeActiveItems();\r\n\t\t\t\tchoicesInstance.setChoiceByValue(valueToSelect);\r\n\t\t\t\tselectElement.value = valueToSelect;\r\n\t\t\t} else {\r\n\t\t\t\tselectElement.value = valueToSelect;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(`CascadingSelectManager: Could not select value ${valueToSelect}`, err);\r\n\t\t}\r\n\t}\r\n\r\n\t\/**\r\n\t * Preload saved selections when the page is loaded.\r\n\t * Supports passing initialization data (initialData)\r\n\t * for subform rows when values are not present in DOM.\r\n\t *\/\r\n\tasync _preloadExistingSelections(chainInstance) {\r\n\t\tlet subformKey = null;\r\n\t\tconst firstSelect = chainInstance[this.fieldChain[0].name];\r\n\t\tif (firstSelect && firstSelect.name) {\r\n\t\t\tconst match = firstSelect.name.match(\/\\[(\\w+\\d+)\\]\/);\r\n\t\t\tif (match) subformKey = match[1];\r\n\t\t}\r\n\r\n\t\tconst preloadedValues = subformKey && this.initialData[subformKey] ? this.initialData[subformKey] : {};\r\n\r\n\t\tfor (let index = 0; index < this.fieldChain.length - 1; index++) {\r\n\t\t\tconst currentField = this.fieldChain[index];\r\n\t\t\tconst nextField = this.fieldChain[index + 1];\r\n\t\t\tif (!nextField.endpoint) continue;\r\n\r\n\t\t\tconst currentSelect = chainInstance[currentField.name];\r\n\t\t\tconst nextSelect = chainInstance[nextField.name];\r\n\t\t\tif (!currentSelect || !nextSelect) continue;\r\n\r\n\t\t\tconst currentValue =\r\n\t\t\t\tpreloadedValues[currentField.name] ||\r\n\t\t\t\tcurrentSelect.value ||\r\n\t\t\t\tcurrentSelect.getAttribute('value');\r\n\r\n\t\t\tif (!currentValue) {\r\n\t\t\t\tthis._resetSelectElement(nextSelect, nextField.placeholder?.initial || '\u2014');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await this._fetchDataFromServer(nextField.endpoint.url, {\r\n\t\t\t\t\t[nextField.endpoint.parameterKey]: currentValue\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._populateSelectElement(nextSelect, data, nextField.placeholder?.ready || '\u2014');\r\n\r\n\t\t\t\tconst nextValue =\r\n\t\t\t\t\tpreloadedValues[nextField.name] ||\r\n\t\t\t\t\tnextSelect.value ||\r\n\t\t\t\t\tnextSelect.getAttribute('value') ||\r\n\t\t\t\t\t'';\r\n\r\n\t\t\t\tif (nextValue) {\r\n\t\t\t\t\tawait this._setFancySelectValue(nextSelect, nextValue);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextSelect.dispatchEvent(new Event('change', { bubbles: true }));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`CascadingSelectManager: preload failed for ${nextField.name}`, error);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t\/* ----------------------------------------------------------------------\r\n\t * Choices.js \/ Fancy Select Integration\r\n\t * ---------------------------------------------------------------------- *\/\r\n\t_ensureChoicesInitialization(element) {\r\n\t\tif (!element) return null;\r\n\r\n\t\tconst fancyWrapper = element.closest('joomla-field-fancy-select');\r\n\t\tconst existingChoices =\r\n\t\t\telement.choices ||\r\n\t\t\t(fancyWrapper && fancyWrapper.choicesInstance) ||\r\n\t\t\t(window.Joomla?.FieldChoices?.instances && Joomla.FieldChoices.instances[element.id]) ||\r\n\t\t\tnull;\r\n\r\n\t\tif (existingChoices) return existingChoices;\r\n\r\n\t\tif (window.Joomla?.FieldChoices?.init) {\r\n\t\t\ttry {\r\n\t\t\t\tconst instance = Joomla.FieldChoices.init(element);\r\n\t\t\t\treturn instance || null;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn('CascadingSelectManager: Joomla FieldChoices.init failed', e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (typeof Choices !== 'undefined') {\r\n\t\t\ttry {\r\n\t\t\t\tconst instance = new Choices(element, { shouldSort: false, searchEnabled: true });\r\n\t\t\t\telement.choices = instance;\r\n\t\t\t\treturn instance;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn('CascadingSelectManager: Choices fallback failed', e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t_bindChangeListener(selectElement, handler) {\r\n\t\tconst fancyWrapper = selectElement.closest('joomla-field-fancy-select');\r\n\t\tconst existingChoices =\r\n\t\t\tselectElement.choices ||\r\n\t\t\t(fancyWrapper && fancyWrapper.choicesInstance) ||\r\n\t\t\t(window.Joomla?.FieldChoices?.instances && Joomla.FieldChoices.instances[selectElement.id]) ||\r\n\t\t\tnull;\r\n\r\n\t\tif (existingChoices) {\r\n\t\t\tconst container = existingChoices.containerOuter?.element || selectElement.closest('.choices');\r\n\t\t\tif (container) {\r\n\t\t\t\tcontainer.addEventListener('change', handler);\r\n\t\t\t\tcontainer.addEventListener('choice', () => handler());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tselectElement.addEventListener('change', handler);\r\n\t\t}\r\n\t}\r\n\r\n\t\/* ----------------------------------------------------------------------\r\n\t * Populate and Refresh\r\n\t * ---------------------------------------------------------------------- *\/\r\n\t_populateSelectElement(element, items, placeholderText) {\r\n\t\tif (!element) return;\r\n\r\n\t\tconst fancyWrapper = element.closest('joomla-field-fancy-select');\r\n\t\tconst choicesInstance =\r\n\t\t\telement.choices ||\r\n\t\t\t(fancyWrapper && fancyWrapper.choicesInstance) ||\r\n\t\t\t(window.Joomla?.FieldChoices?.instances && Joomla.FieldChoices.instances[element.id]) ||\r\n\t\t\tnull;\r\n\r\n\t\tconst currentValue = element.value || element.getAttribute('value') || '';\r\n\r\n\t\telement.innerHTML = `<option value=\"\">${this._translateText(placeholderText)}<\/option>`;\r\n\t\tif (Array.isArray(items)) {\r\n\t\t\tfor (const item of items) {\r\n\t\t\t\tconst option = document.createElement('option');\r\n\t\t\t\toption.value = item.value;\r\n\t\t\t\toption.textContent = item.text;\r\n\t\t\t\tif (item.value === currentValue) option.selected = true;\r\n\t\t\t\telement.appendChild(option);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (choicesInstance) {\r\n\t\t\ttry {\r\n\t\t\t\tchoicesInstance.clearStore();\r\n\t\t\t\tconst formatted = items.map((i) => ({\r\n\t\t\t\t\tvalue: i.value,\r\n\t\t\t\t\tlabel: i.text,\r\n\t\t\t\t\tselected: i.value === currentValue,\r\n\t\t\t\t\tdisabled: false\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tchoicesInstance.setChoices(\r\n\t\t\t\t\t[{ value: '', label: this._translateText(placeholderText), selected: !currentValue, disabled: true }, ...formatted],\r\n\t\t\t\t\t'value',\r\n\t\t\t\t\t'label',\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error('CascadingSelectManager: failed to update Choices list', e);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._ensureChoicesInitialization(element);\r\n\t\t}\r\n\r\n\t\telement.dispatchEvent(new Event('change', { bubbles: true }));\r\n\t}\r\n\r\n\t_resetSelectElement(element, placeholderText) {\r\n\t\tif (!element) return;\r\n\t\tconst choicesInstance = this._ensureChoicesInitialization(element);\r\n\r\n\t\tif (choicesInstance) {\r\n\t\t\ttry {\r\n\t\t\t\tchoicesInstance.clearStore();\r\n\t\t\t\tchoicesInstance.setChoices(\r\n\t\t\t\t\t[{ value: '', label: this._translateText(placeholderText), selected: false, disabled: true }],\r\n\t\t\t\t\t'value',\r\n\t\t\t\t\t'label',\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn('CascadingSelectManager: Choices reset failed', e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telement.innerHTML = `<option value=\"\">${this._translateText(placeholderText)}<\/option>`;\r\n\t\tthis._ensureChoicesInitialization(element);\r\n\t\telement.dispatchEvent(new Event('change', { bubbles: true }));\r\n\t}\r\n\r\n\t_ensurePlaceholderIfEmpty(element, placeholderText) {\r\n\t\tif (!element) return;\r\n\t\tif (!element.options || element.options.length === 0) {\r\n\t\t\tconst option = document.createElement('option');\r\n\t\t\toption.value = '';\r\n\t\t\toption.textContent = this._translateText(placeholderText);\r\n\t\t\telement.appendChild(option);\r\n\t\t}\r\n\t\tthis._ensureChoicesInitialization(element);\r\n\t}\r\n\r\n\t\/* ----------------------------------------------------------------------\r\n\t * Fetch\r\n\t * ---------------------------------------------------------------------- *\/\r\n\tasync _fetchDataFromServer(url, parameters) {\r\n\t\tconst queryString = new URLSearchParams(parameters || {}).toString();\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(`${url}${url.includes('?') ? '&' : '?'}${queryString}`, {\r\n\t\t\t\theaders: { 'X-Requested-With': 'XMLHttpRequest' },\r\n\t\t\t});\r\n\t\t\tif (!response.ok) throw new Error(`HTTP ${response.status}`);\r\n\r\n\t\t\tconst responseData = await response.json();\r\n\t\t\tif (responseData && typeof responseData === 'object') {\r\n\t\t\t\tif (responseData.data !== 'undefined') {\r\n\t\t\t\t\treturn  responseData.data;\r\n\t\t\t\t} else if (responseData.error !== 'undefined') {\r\n\t\t\t\t\tconsole.error(`CascadingSelectManager: Server error \u2014 ${responseData.error}`);\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconsole.warn('CascadingSelectManager: Unexpected response format', responseData);\r\n\t\t\treturn [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('CascadingSelectManager: Failed to fetch data', error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t\/* ----------------------------------------------------------------------\r\n\t * Utilities\r\n\t * ---------------------------------------------------------------------- *\/\r\n\t_translateText(text) {\r\n\t\ttry {\r\n\t\t\tif (window.Joomla?.Text?._) return Joomla.Text._(text);\r\n\t\t} catch { \/* ignore *\/ }\r\n\t\treturn String(text || '');\r\n\t}\r\n\r\n\t_findAllMatchingElements(rootElement, identifier, mode) {\r\n\t\t\/\/ guard: if rootElement can't query, fallback to document\r\n\t\tconst scope = rootElement.querySelectorAll ? rootElement : document;\r\n\t\treturn Array.from(scope.querySelectorAll('select[id]')).filter((element) => {\r\n\t\t\tconst elementId = element.id || '';\r\n\t\t\treturn (\r\n\t\t\t\t(mode === 'exact' && elementId === identifier) ||\r\n\t\t\t\t(mode === 'endsWith' && elementId.endsWith(identifier)) ||\r\n\t\t\t\t(mode === 'startsWith' && elementId.startsWith(identifier))\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t_buildChainInstance(firstSelectElement, rootElement) {\r\n\t\tconst chainInstance = {};\r\n\t\tconst firstField = this.fieldChain[0];\r\n\t\tchainInstance[firstField.name] = firstSelectElement;\r\n\r\n\t\tconst firstIdentifier = firstSelectElement.id || '';\r\n\t\tlet baseIdentifier = '';\r\n\r\n\t\tif (this.matchMode === 'endsWith') {\r\n\t\t\tbaseIdentifier = firstIdentifier.slice(0, -String(firstField.identifier).length);\r\n\t\t} else if (this.matchMode === 'startsWith') {\r\n\t\t\tbaseIdentifier = firstIdentifier.slice(String(firstField.identifier).length);\r\n\t\t}\r\n\r\n\t\tfor (let index = 1; index < this.fieldChain.length; index++) {\r\n\t\t\tconst fieldConfiguration = this.fieldChain[index];\r\n\t\t\tconst selectElement = this._resolveSiblingElement(rootElement, baseIdentifier, fieldConfiguration);\r\n\t\t\tif (!selectElement) return null;\r\n\t\t\tchainInstance[fieldConfiguration.name] = selectElement;\r\n\t\t}\r\n\t\treturn chainInstance;\r\n\t}\r\n\r\n\t_resolveSiblingElement(rootElement, baseIdentifier, fieldConfiguration) {\r\n\t\tconst identifier = String(fieldConfiguration.identifier);\r\n\t\tlet selectElement = null;\r\n\r\n\t\t\/\/ prefer searching within rootElement (row) first\r\n\t\tconst scope = rootElement.querySelector ? rootElement : document;\r\n\r\n\t\tif (this.matchMode === 'exact') {\r\n\t\t\tselectElement = document.getElementById(identifier);\r\n\t\t} else if (this.matchMode === 'endsWith') {\r\n\t\t\tif (baseIdentifier) selectElement = document.getElementById(baseIdentifier + identifier);\r\n\t\t\tif (!selectElement) selectElement = this._findAllMatchingElements(scope, identifier, 'endsWith')[0];\r\n\t\t} else if (this.matchMode === 'startsWith') {\r\n\t\t\tif (baseIdentifier) selectElement = document.getElementById(identifier + baseIdentifier);\r\n\t\t\tif (!selectElement) selectElement = this._findAllMatchingElements(scope, identifier, 'startsWith')[0];\r\n\t\t}\r\n\t\treturn selectElement;\r\n\t}\r\n\r\n\t_normalizeFieldConfiguration(configuration) {\r\n\t\treturn {\r\n\t\t\tname: String(configuration.name || '').trim(),\r\n\t\t\tidentifier: String(configuration.id || '').trim(),\r\n\t\t\tplaceholder: configuration.placeholder || {},\r\n\t\t\tendpoint: configuration.endpoint\r\n\t\t\t\t? {\r\n\t\t\t\t\turl: String(configuration.endpoint.url || ''),\r\n\t\t\t\t\tbasedOn: String(configuration.endpoint.basedOn || ''),\r\n\t\t\t\t\tparameterKey: String(configuration.endpoint.paramKey || ''),\r\n\t\t\t\t}\r\n\t\t\t\t: null,\r\n\t\t};\r\n\t}\r\n\r\n\t_normalizeMatchMode(mode) {\r\n\t\tif (mode === 1 || mode === 'exact') return 'exact';\r\n\t\tif (mode === 2 || mode === 'endsWith') return 'endsWith';\r\n\t\tif (mode === 3 || mode === 'startsWith') return 'startsWith';\r\n\t\treturn 'endsWith';\r\n\t}\r\n}",
    "hashendtarget": "",
    "to_line": "",
    "from_line": "",
    "hashtarget": "",
    "component": ""
}