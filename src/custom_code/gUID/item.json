{
    "system_name": "helper::GUID",
    "path": "",
    "target": 2,
    "type": 0,
    "comment_type": 1,
    "joomla_version": 3,
    "function_name": "gUID",
    "code": "\t\/**\r\n\t * Returns a GUIDv4 string\r\n\t * \r\n\t * Thanks to Dave Pearson (and other)\r\n\t * https:\/\/www.php.net\/manual\/en\/function.com-create-guid.php#119168 \r\n\t *\r\n\t * Uses the best cryptographically secure method\r\n\t * for all supported platforms with fallback to an older,\r\n\t * less secure version.\r\n\t *\r\n\t * @param bool $trim\r\n\t * @return string\r\n\t *\/\r\n\tpublic static function GUID ($trim = true)\r\n\t{\r\n\t\t\/\/ Windows\r\n\t\tif (function_exists('com_create_guid') === true)\r\n\t\t{\r\n\t\t\tif ($trim === true)\r\n\t\t\t{\r\n\t\t\t\treturn trim(com_create_guid(), '{}');\r\n\t\t\t}\r\n\t\t\treturn com_create_guid();\r\n\t\t}\r\n\r\n\t\t\/\/ set the braces if needed\r\n\t\t$lbrace = $trim ? \"\" : chr(123);    \/\/ \"{\"\r\n\t\t$rbrace = $trim ? \"\" : chr(125);    \/\/ \"}\"\r\n\r\n\t\t\/\/ OSX\/Linux\r\n\t\tif (function_exists('openssl_random_pseudo_bytes') === true)\r\n\t\t{\r\n\t\t\t$data = openssl_random_pseudo_bytes(16);\r\n\t\t\t$data[6] = chr(ord($data[6]) & 0x0f | 0x40);    \/\/ set version to 0100\r\n\t\t\t$data[8] = chr(ord($data[8]) & 0x3f | 0x80);    \/\/ set bits 6-7 to 10\r\n\t\t\treturn $lbrace . vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4)) . $lbrace;\r\n\t\t}\r\n\r\n\t\t\/\/ Fallback (PHP 4.2+)\r\n\t\tmt_srand((double)microtime() * 10000);\r\n\t\t$charid = strtolower(md5(uniqid(rand(), true)));\r\n\t\t$hyphen = chr(45);                  \/\/ \"-\"\r\n\t\t$guidv4 = $lbrace.\r\n\t\t\tsubstr($charid,  0,  8).$hyphen.\r\n\t\t\tsubstr($charid,  8,  4).$hyphen.\r\n\t\t\tsubstr($charid, 12,  4).$hyphen.\r\n\t\t\tsubstr($charid, 16,  4).$hyphen.\r\n\t\t\tsubstr($charid, 20, 12).\r\n\t\t\t$rbrace;\r\n\t\treturn $guidv4;\r\n\t}\r\n\r\n\t\/**\r\n\t * Validate the Globally Unique Identifier ( and check if table already has this identifier)\r\n\t *\r\n\t * @param string $guid\r\n\t * @param string $table\r\n\t * @param int      $id\r\n\t * @return bool\r\n\t *\/\r\n\tpublic static function validGUID ($guid, $table = null, $id = 0)\r\n\t{\r\n\t\t\/\/ check if we have a string\r\n\t\tif (self::validateGUID($guid))\r\n\t\t{\r\n\t\t\t\/\/ check if table already has this identifier\r\n\t\t\tif (self::checkString($table))\r\n\t\t\t{\r\n\t\t\t\t\/\/ Get the database object and a new query object.\r\n\t\t\t\t$db = \\JFactory::getDbo();\r\n\t\t\t\t$query = $db->getQuery(true);\r\n\t\t\t\t$query->select('COUNT(*)')\r\n\t\t\t\t\t->from('#__[[[component]]]_' . (string) $table)\r\n\t\t\t\t\t->where($db->quoteName('guid') . ' = ' . $db->quote($guid));\r\n\r\n\t\t\t\t\/\/ remove this item from the list\r\n\t\t\t\tif ($id > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t$query->where($db->quoteName('id') . ' <> ' . (int) $id);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Set and query the database.\r\n\t\t\t\t$db->setQuery($query);\r\n\t\t\t\t$duplicate = (bool) $db->loadResult();\r\n\r\n\t\t\t\tif ($duplicate)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t\/**\r\n\t * get the ID of a GUID\r\n\t *\r\n\t * @param string $guid\r\n\t * @param string $table\r\n\t *\r\n\t * @return int\r\n\t *\/\r\n\tpublic static function getGUIDID ($guid, $table, $default = false)\r\n\t{\r\n\t\t\/\/ check if we have a string\r\n\t\tif (self::validateGUID($guid))\r\n\t\t{\r\n\t\t\t\/\/ check if table already has this identifier\r\n\t\t\tif (self::checkString($table))\r\n\t\t\t{\r\n\t\t\t\t\/\/ Get the database object and a new query object.\r\n\t\t\t\t$db = \\JFactory::getDbo();\r\n\t\t\t\t$query = $db->getQuery(true);\r\n\t\t\t\t$query->select('id')\r\n\t\t\t\t\t->from('#__[[[component]]]_' . (string) $table)\r\n\t\t\t\t\t->where($db->quoteName('guid') . ' = ' . $db->quote($guid));\r\n\r\n\t\t\t\t\/\/ Set and query the database.\r\n\t\t\t\t$db->setQuery($query);\r\n\t\t\t\t$db->execute();\r\n\r\n\t\t\t\tif ($db->getNumRows())\r\n\t\t\t\t{\r\n\t\t\t\t\treturn $db->loadResult();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $default;\r\n\t}\r\n\r\n\t\/**\r\n\t * Validate the Globally Unique Identifier\r\n\t *\r\n\t * Thanks to Lewie\r\n\t * https:\/\/stackoverflow.com\/a\/1515456\/1429677\r\n\t *\r\n\t * @param string $guid\r\n\t * @return bool\r\n\t *\/\r\n\tprotected static function validateGUID ($guid)\r\n\t{\r\n\t\t\/\/ check if we have a string\r\n\t\tif (self::checkString($guid))\r\n\t\t{\r\n\t\t\treturn preg_match(\"\/^(\\{)?[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}(?(1)\\})$\/i\", $guid);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n",
    "hashendtarget": "",
    "to_line": "",
    "from_line": "",
    "hashtarget": "",
    "component": "0"
}