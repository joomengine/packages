{
    "system_name": "helper::getItemImportFields",
    "path": null,
    "target": 2,
    "type": 0,
    "comment_type": 1,
    "joomla_version": 3,
    "function_name": "getItemImportFields",
    "code": "\t\/**\r\n\t * The Spreadsheet Headers\r\n\t *\r\n\t * @var   array\r\n\t * @since 5.0.2\r\n\t *\/\r\n\tprotected static array $SpreadsheetHeaders = [];\r\n\r\n\t\/**\r\n\t * The Item Import Fields\r\n\t *\r\n\t * @var   array\r\n\t * @since 5.0.2\r\n\t *\/\r\n\tprotected static array $ItemImportFields = [];\r\n\r\n\t\/**\r\n\t * Get the list of headers to show in column field\r\n\t *\r\n\t * @return  array  The list of headers\r\n\t * @since   5.0.2\r\n\t *\/\r\n\tpublic static function getSpreadsheetHeaders(): array\r\n\t{\r\n\t\t$endColumn = 'DA';\r\n\t\t$column = 'A';\r\n\t\t$options = [];\r\n\t\twhile ($column !== $endColumn)\r\n\t\t{\r\n\t\t\t$options[$column] = self::getSpreadsheetHeader($column);\r\n\t\t\t$column = ++$column;\r\n\t\t}\r\n\t\treturn $options;\r\n\t}\r\n\r\n\t\/**\r\n\t * Get the header column value (name)\r\n\t *\r\n\t * @return  string  The header value\r\n\t * @since   5.0.2\r\n\t *\/\r\n\tprotected static function getSpreadsheetHeader(string $column): string\r\n\t{\r\n\t\treturn self::$SpreadsheetHeaders[$column] ?? $column;\r\n\t}\r\n\r\n\t\/**\r\n\t * Set the header column values\r\n\t *\r\n\t * @return  void\r\n\t * @since   5.0.2\r\n\t *\/\r\n\tpublic static function setSpreadsheetHeaders(array $headers): void\r\n\t{\r\n\t\tself::$SpreadsheetHeaders = $headers;\r\n\t}\r\n\r\n\t\/**\r\n\t * Retrieves a list of import fields from the item entity.\r\n\t *\r\n\t * @param bool  $simple The switch to return simple list (to leave out the link data)\r\n\t *\r\n\t * @return array Returns an associative array where the key is the table.column name and the value \r\n\t *                           is the label of the column (potentially including additional information).\r\n\t * @since  5.0.2\r\n\t *\/\r\n\tpublic static function getItemImportFields(bool $simple = false): array\r\n\t{\r\n\t\tif (!empty(self::$ItemImportFields))\r\n\t\t{\r\n\t\t\treturn self::$ItemImportFields;\r\n\t\t}\r\n[[[arg0]]]\r\n\t\tself::$ItemImportFields = self::getImportFields($parent, $tables, $simple);\r\n\r\n\t\treturn self::$ItemImportFields;\r\n\t}\r\n\r\n\t\/**\r\n\t * Retrieves a list of target fields from the specified tables, with appropriate filtering based on\r\n\t * rules like ignoring certain columns, linking rules, and user roles.\r\n\t *\r\n\t * @param string $parent The parent entity to check for upstream linking.\r\n\t * @param array  $tables An associative array of tables and whether to add GUID for each table. \r\n\t *                           The keys represent table names, and the values are booleans to indicate\r\n\t *                           whether to include the 'guid' column.\r\n\t * @param bool  $simple The switch to return simple list (to leave out the link data)\r\n\t *\r\n\t * @return array Returns an associative array where the key is the table.column name and the value \r\n\t *                           is the label of the column (potentially including additional information).\r\n\t * @since  5.0.2\r\n\t *\/\r\n\tprotected static function getImportFields(string $parent, array $tables, bool $simple = false): array\r\n\t{\r\n\t\t\/\/ Get the current user object.\r\n\t\t$user = Joomla___39403062_84fb_46e0_bac4_0023f766e827___Power::getUser();\r\n\r\n\t\t$ignore = [];\r\n\t\t$target_fields = [];\r\n\r\n\t\t\/\/ Loop through each table provided.\r\n\t\tforeach ($tables as $table => $add_guid)\r\n\t\t{\r\n\t\t\t\/\/ Retrieve the fields for the table. If no fields, default to an empty array.\r\n\t\t\t$items = Super___ff8d5fdb_2d1f_4178_bd18_a43b8efd1068___Power::_('Table')->fields($table, false, true) ?? [];\r\n\r\n\t\t\t\/\/ Process each field if the table contains any fields.\r\n\t\t\tforeach ($items as $item)\r\n\t\t\t{\r\n\t\t\t\t$field_name = $item['name'];\r\n\r\n\t\t\t\t\/\/ Ignore downstream linking columns.\r\n\t\t\t\tif (isset($ignore[$table][$field_name]))\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Skip adding the 'guid' field if the table doesn't require it.\r\n\t\t\t\tif ($field_name === 'guid' && !$add_guid)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Skip fields [ add more field you would like to skip in all targeted tables ]\r\n\t\t\t\tif ([[[arg1]]]$field_name === 'access' ||\r\n\t\t\t\t\t$field_name === 'metadata' ||\r\n\t\t\t\t\t$field_name === 'metakey' ||\r\n\t\t\t\t\t$field_name === 'metadesc' )\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Initialize additional info to be appended to the field label.\r\n\t\t\t\t$info = ' - ' . $table . '->' . $field_name . ':' . strtolower($item['db']['type']);\r\n\r\n\t\t\t\t\/\/ Handle linking information if available.\r\n\t\t\t\tif (!empty($item['link']['entity']) &&\r\n\t\t\t\t\t!empty($item['link']['value']) &&\r\n\t\t\t\t\t!empty($item['link']['key']))\r\n\t\t\t\t{\r\n\t\t\t\t\t\r\n\t\t\t\t\t\/\/ Ignore upstream linking columns.\r\n\t\t\t\t\tif (isset($ignore[$item['link']['entity']][$item['link']['key']]))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\/\/ Skip parent linkers for non-parent tables.\r\n\t\t\t\t\tif ($table !== $parent && $item['link']['entity'] === $parent)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$info .= ' >>> ' . $item['link']['entity'] . '->[' . $item['link']['value'] . ']->' . $item['link']['key'];\r\n\t\t\t\t\t$ignore[$item['link']['entity']] = $item['link']['key'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($simple)\r\n\t\t\t\t{\r\n\t\t\t\t\t$target_fields[$table . '.' . $field_name] = Text::_($item['label']);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t\/\/ For other users, append the additional field info.\r\n\t\t\t\t\t$target_fields[$table . '.' . $field_name] = Text::_($item['label']) . $info;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/\/ Mark the current field as ignored for future checks.\r\n\t\t\t\t$ignore[$table][$field_name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $target_fields;\r\n\t}\r\n\r\n\t\/**\r\n\t * Retrieves a dynamic values of the import subform for item mapping\r\n\t *\r\n\t * @return array|null the values\r\n\t * @since  5.0.2\r\n\t *\/\r\n\tpublic static function getItemImportSubformValues(): ?array\r\n\t{\r\n\t\t$subform_name = 'maps';\r\n\t\t$values = [];\r\n\t\t$headers = self::getSpreadsheetHeaders();\r\n\t\t$target_fields = self::getItemImportFields();\r\n\t\t$number = 0;\r\n\t\tforeach ($headers as $header => $text)\r\n\t\t{\r\n\t\t\t$values[\"{$subform_name}{$number}\"] = ['column' => $header, 'target' => self::getImportFieldMatch($text, $target_fields)];\r\n\t\t\t$number++;\r\n\t\t}\r\n\t\treturn $values;\r\n\t}\r\n\r\n\t\/**\r\n\t * Matches a name value against the keys and values of a given array.\r\n\t * The key must match strictly (===) and the value must start with the name (case-insensitive).\r\n\t *\r\n\t * @param string $name   The name to search for.\r\n\t * @param array  $fields The array of fields to match against. The array should have keys and values.\r\n\t *\r\n\t * @return string|null Returns the key if a match is found, or null if no match is found.\r\n\t * @since  5.0.2\r\n\t *\/\r\n\tprotected static function getImportFieldMatch(string $name, array $fields): string\r\n\t{\r\n\t\tforeach ($fields as $key => $value)\r\n\t\t{\r\n\t\t\t\/\/ Check if the name strictly matches the key\r\n\t\t\tif ($key === $name)\r\n\t\t\t{\r\n\t\t\t\treturn $key;\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ Check if the name starts with the value (case-insensitive)\r\n\t\t\tif (self::startsWithIgnoreCase($value, $name . ' '))\r\n\t\t\t{\r\n\t\t\t\treturn $key;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\/\/ Return null if no match is found\r\n\t\treturn '';\r\n\t}\r\n\r\n\t\/**\r\n\t * Helper function to check if a string starts with another string (case-insensitive).\r\n\t *\r\n\t * @param string $haystack  The string to check.\r\n\t * @param string $needle    The string to match the beginning.\r\n\t *\r\n\t * @return bool Returns true if $needle matches the start of $haystack, false otherwise.\r\n\t * @since  5.0.2\r\n\t *\/\r\n\tprotected static function startsWithIgnoreCase(string $haystack, string $needle): bool\r\n\t{\r\n\t\treturn stripos($haystack, $needle) === 0;\r\n\t}",
    "hashendtarget": "",
    "to_line": "",
    "from_line": "",
    "hashtarget": "",
    "component": ""
}