{
    "system_name": "helper::fancyDate($date)",
    "path": "",
    "target": 2,
    "type": 0,
    "comment_type": 1,
    "joomla_version": 3,
    "function_name": "niceFancyDate",
    "code": "\t\/**\r\n\t * Convert a date to a human-readable fancy format (e.g., \"1st of January 2024\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Formatted date.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDate($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function fancyDate($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDate($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Get a formatted date based on the time period (dynamic format based on age of the date).\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Formatted date.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDynamicDate($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function fancyDynamicDate($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDynamicDate($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to a human-readable day, time, and date format (e.g., \"Mon 12am 1st of January 2024\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Formatted day, time, and date.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDayTimeDate($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function fancyDayTimeDate($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDayTimeDate($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to a human-readable time and date format (e.g., \"(12:00) 1st of January 2024\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Formatted time and date.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDateTime($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function fancyDateTime($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyDateTime($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a time to a human-readable format (e.g., \"12:00\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Formatted time.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyTime($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function fancyTime($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::fancyTime($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to the day name (e.g., \"Sunday\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Day name.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setDayName($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function setDayName($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setDayName($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to the month name (e.g., \"January\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Month name.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setMonthName($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function setMonthName($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setMonthName($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to the day with suffix (e.g., \"1st\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Day with suffix.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setDay($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function setDay($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setDay($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to the numeric month (e.g., \"5\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Numeric month.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setMonth($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function setMonth($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setMonth($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to the full year (e.g., \"2024\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Full year.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setYear($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function setYear($date, bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setYear($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to a year\/month format (e.g., \"2024\/05\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param string      $spacer       The spacer between year and month.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Year\/Month format.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setYearMonth($date, $spacer, $checkStamp);\r\n\t *\/\r\n\tpublic static function setYearMonth($date, string $spacer = '\/', bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setYearMonth($date, $spacer, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to a year\/month\/day format (e.g., \"2024\/05\/03\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param string      $spacer       The spacer between year and month.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Year\/Month\/Day format.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setYearMonthDay($date, $spacer, $checkStamp);\r\n\t *\/\r\n\tpublic static function setYearMonthDay($date, string $spacer = '\/', bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setYearMonthDay($date, $spacer, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date to a day\/month\/year format (e.g., \"03\/05\/2024\").\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param string      $spacer       The spacer between year and month.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return string Day\/Month\/Year format.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setDayMonthYear($date, $spacer, $checkStamp);\r\n\t *\/\r\n\tpublic static function setDayMonthYear($date, string $spacer = '\/', bool $checkStamp = true): string\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::setDayMonthYear($date, $spacer, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Convert a date string to a valid timestamp.\r\n\t *\r\n\t * @param string|int  $date         The date as a string or timestamp.\r\n\t * @param bool        $checkStamp   Whether to check if the input is a timestamp.\r\n\t *\r\n\t * @return int The valid timestamp.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::getValidTimestamp($date, $checkStamp);\r\n\t *\/\r\n\tpublic static function getValidTimestamp($date, bool $checkStamp): int\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::getValidTimestamp($date, $checkStamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Check if the input is a valid Unix timestamp.\r\n\t *\r\n\t * @param mixed $timestamp The timestamp to validate.\r\n\t *\r\n\t * @return bool True if valid timestamp, false otherwise.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::isValidTimeStamp($timestamp);\r\n\t *\/\r\n\tpublic static function isValidTimeStamp($timestamp): bool\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::isValidTimeStamp($timestamp);\r\n\t}\r\n\r\n\t\/**\r\n\t * Check if a string is a valid date according to the specified format.\r\n\t *\r\n\t * @param string $date The date string to validate.\r\n\t * @param string $format The format to check against (default is 'Y-m-d H:i:s').\r\n\t *\r\n\t * @return bool True if valid date, false otherwise.\r\n\t * @since 3.0.0\r\n\t * @deprecated 4.0.0 Use Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::isValidateDate($date, $format);\r\n\t *\/\r\n\tpublic static function isValidateDate($date, string $format = 'Y-m-d H:i:s'): bool\r\n\t{\r\n\t\treturn Super___993fe913_8e36_4800_a5f7_544aa728ee48___Power::isValidateDate($date, $format);\r\n\t}",
    "hashendtarget": "",
    "to_line": "0",
    "from_line": "0",
    "hashtarget": "",
    "component": "0"
}